def call(def propertiesFolderPath) {
    stage('Sonar Analysis') {
        def gitURL = env.ghprbAuthorRepoGitUrl ?: env.GIT_URL
        def project = util.getProjectGroupName(util.getProject(gitURL))[1]
        if(["optaplanner", "drools", "appformer", "jbpm", "drools-wb", "kie-soup", "droolsjbpm-integration", "kie-wb-common", "openshift-drools-hacep", "optaweb-employee-rostering", "optaweb-vehicle-routing"].contains(project))
        {
            final SETTINGS_XML_ID = "771ff52a-a8b4-40e6-9b22-d54c7314aa1e"
            final PROPERTIES_FILE_PATH = "${propertiesFolderPath}/pullrequest.properties"
            final SONARCLOUD_ID = "SONARCLOUD_TOKEN"
            configFileProvider([configFile(fileId: SETTINGS_XML_ID, variable: 'MAVEN_SETTINGS_XML_UPSTREAM')]) {
                pullrequest.buildSonar(project, "${SETTINGS_XML_ID}", util.getGoals(project, "${PROPERTIES_FILE_PATH}", 'sonarcloud'), "${SONARCLOUD_ID}")
            }
        } else {
            println "Project ${project} shouldn't be analyzed"
        }
    }
}

return this