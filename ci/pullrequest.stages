def call(def propertiesFolderPath) {
    stage('Pull Request Build') {
        final REPOSITORY_LIST_FILE = "./script/repository-list.txt"
        final SETTINGS_XML_ID = "771ff52a-a8b4-40e6-9b22-d54c7314aa1e"
        final PROPERTIES_FILE_PATH = "${propertiesFolderPath}/pullrequest.properties"
        final SONARCLOUD_ID = "SONARCLOUD_TOKEN"
        configFileProvider([configFile(fileId: SETTINGS_XML_ID, variable: 'MAVEN_SETTINGS_XML_UPSTREAM')]) {
            println "Reading file ${REPOSITORY_LIST_FILE}"
            def file = readFile REPOSITORY_LIST_FILE
            def projectCollection = file.readLines()
            projectCollection.removeAll(['kie-jpmml-integration'])
            def gitURL = env.ghprbAuthorRepoGitUrl ?: env.GIT_URL
            def project = util.getProjectGroupName(util.getProject(gitURL))[1]
            if (project != "kie-docs") {
                pullrequest.build(projectCollection, project, "${SETTINGS_XML_ID}", "${PROPERTIES_FILE_PATH}", "${SONARCLOUD_ID}", ["optaplanner", "drools", "appformer", "jbpm", "drools-wb", "kie-soup", "droolsjbpm-integration", "kie-wb-common", "openshift-drools-hacep", "optaweb-employee-rostering"])
            } else {
                pullrequest.build(["kie-docs"], project, "${SETTINGS_XML_ID}", "${PROPERTIES_FILE_PATH}", "")
            }
        }
    }
}

return this