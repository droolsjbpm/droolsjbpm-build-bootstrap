@Library('jenkins-pipeline-shared-libraries-ginxo')_

pipeline {
    agent {
        label 'kie-rhel7-priority'
    }
    tools {
        maven 'kie-maven-3.6.0'
        jdk 'kie-jdk1.8'
    }
    parameters {
        string(description: 'The deployment URL', name: 'KIE_GROUP_DEPLOYMENT_REPO_URL')
        booleanParam(description: 'Skip Tests? True as default', name: 'SKIP_TESTS', defaultValue: true)
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'master')
        string(description: 'The product version', name: 'PRODUCT_VERSION')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'

            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    def pipelineHelper = new PipelineHelper(this)
                    pipelineHelper.retry(
                    {
                        def SETTINGS_XML_ID = "5d9884a1-178a-4d67-a3ac-9735d2df2cef"

                        // This is the map project, variable to store the version from this project
                        def repositoryListPath = "./script/repository-list.txt"
                        def projectVariableMap = ['kiegroup_droolsjbpm-build-bootstrap': "kieVersion", 'jboss-integration_izpack': "izpackVersion", 'jboss-integration_installer-commons': "installerCommonsVersion"]
                        def nightlyStages = load("$WORKSPACE/nightly.stages")

                        configFileProvider([configFile(fileId: "49737697-ebd6-4396-9c22-11f7714808eb", variable: 'PRODUCTION_PROJECT_LIST')]) {
                            println "Reading file ${repositoryListPath} and merging it with ${PRODUCTION_PROJECT_LIST} jenkins file"
                            def communityProjectListFile = readFile repositoryListPath
                            def projectCollection = communityProjectListFile.readLines()
                            def productionProjectListFile = readFile "${env.PRODUCTION_PROJECT_LIST}"
                            projectCollection.addAll(productionProjectListFile.readLines())
                            projectCollection.removeAll { 'droolsjbpm-tools'.equals(it.toLowerCase()) } // The droolsjbpm-tools is skiped
                            println "File ${repositoryListPath} and ${env.PRODUCTION_PROJECT_LIST} jenkins file merged in ${projectCollection}"
                            nightlyStages(SETTINGS_XML_ID, projectCollection, "rhba/nightly", projectVariableMap)
                        }
                    }, 2, 480*60)
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
